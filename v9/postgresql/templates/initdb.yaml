apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      initContainers:
        - name: check-db-ready
          image: postgres:latest
          env:
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_HOST
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: POSTGRES_PORT
          command:
            - sh
            - "-c"
            - |
              until pg_isready -h $POSTGRES_HOST  -p  $POSTGRES_PORT; 
              do echo waiting for database; sleep 2; done;
      containers:
      - name: post-install-job
        envFrom:
          - configMapRef:
              name: postgres-config
          - secretRef:
              name: postgres-secret
        env:
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ printf "%s-%s" .Release.Name "postgresql" }}
                key: postgresql-postgres-password
          - name: POSTGRES_USER
            value: postgres
        image: postgres:latest
        command:
          - sh
          - "-c"
          - |
            PGPASSWORD=$POSTGRES_PASSWORD psql -d $POSTGRES_DB -U $POSTGRES_USER -h $POSTGRES_HOST -p $POSTGRES_PORT <<'EOF'
              CREATE EXTENSION pgcrypto;

              CREATE SCHEMA auth;
              CREATE SCHEMA billing;
              CREATE SCHEMA notify;
              CREATE SCHEMA orders;
              CREATE SCHEMA profile;
              CREATE SCHEMA store;
              CREATE SCHEMA delivery;

              CREATE USER $(POSTGRES_AUTH_USER) WITH PASSWORD '$(POSTGRES_AUTH_PASSWORD)';
              CREATE USER $(POSTGRES_BILLING_USER) WITH PASSWORD '$(POSTGRES_BILLING_PASSWORD)';
              CREATE USER $(POSTGRES_NOTIFY_USER) WITH PASSWORD '$(POSTGRES_NOTIFY_PASSWORD)';
              CREATE USER $(POSTGRES_ORDER_USER) WITH PASSWORD '$(POSTGRES_ORDER_PASSWORD)';
              CREATE USER $(POSTGRES_PROFILE_USER) WITH PASSWORD '$(POSTGRES_PROFILE_PASSWORD)';
              CREATE USER $(POSTGRES_STORE_USER) WITH PASSWORD '$(POSTGRES_STORE_PASSWORD)';
              CREATE USER $(POSTGRES_DELIVERY_USER) WITH PASSWORD '$(POSTGRES_DELIVERY_PASSWORD)';

              CREATE TYPE saga_state AS ENUM ('pending', 'accepted', 'rejected');

              CREATE TABLE IF NOT EXISTS auth.users (
                  id SERIAL,
                  email VARCHAR UNIQUE,
                  password VARCHAR,
                  phone VARCHAR,
                  username VARCHAR
              );

              CREATE TABLE IF NOT EXISTS billing.balances (
                  user_id BIGINT UNIQUE,
                  value INTEGER
              );

              CREATE TABLE IF NOT EXISTS billing.lock_table (
                  key VARCHAR UNIQUE
              );

              CREATE TABLE IF NOT EXISTS billing.processed_messages (
                transaction_id SERIAL,
                saga_key VARCHAR,
                state saga_state,
                data JSONB,
                UNIQUE (saga_key, transaction_id)
            );

              CREATE TABLE IF NOT EXISTS notify.messages (
                message_id SERIAL,
                user_id BIGINT,
                email VARCHAR,
                body TEXT,
                timestamp TIMESTAMP DEFAULT now()
              );

              CREATE TABLE IF NOT EXISTS orders.orders (
                  order_id SERIAL,
                  user_id BIGINT,
                  price INTEGER,
                  status VARCHAR,
                  timestamp TIMESTAMP DEFAULT now()
              );

              CREATE TABLE IF NOT EXISTS orders.lock_table (
                key VARCHAR UNIQUE
              );

              CREATE TABLE IF NOT EXISTS profile.users (
                user_id INTEGER UNIQUE,
                email VARCHAR,
                phone VARCHAR,
                username VARCHAR
              );

              CREATE TABLE IF NOT EXISTS store.remnants (
                  onerow_id BOOLEAN PRIMARY KEY DEFAULT TRUE,
                  value INTEGER,
                  CONSTRAINT onerow_uni CHECK (onerow_id)
              );

              CREATE TABLE IF NOT EXISTS store.processed_messages (
                  transaction_id SERIAL,
                  saga_key VARCHAR,
                  state saga_state,
                  data JSONB
              );

              CREATE TABLE IF NOT EXISTS delivery.routes (
                  order_id VARCHAR,
                  route_status VARCHAR
              );

              CREATE TABLE IF NOT EXISTS delivery.processed_messages (
                transaction_id SERIAL,
                saga_key VARCHAR,
                state saga_state,
                data JSONB
              );

              GRANT CONNECT ON DATABASE $(POSTGRES_DB) TO $(POSTGRES_AUTH_USER);
              GRANT ALL PRIVILEGES ON SCHEMA auth TO $(POSTGRES_AUTH_USER);
              GRANT ALL ON ALL TABLES IN SCHEMA auth TO $(POSTGRES_AUTH_USER);
              GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA auth TO $(POSTGRES_AUTH_USER);

              GRANT CONNECT ON DATABASE $(POSTGRES_DB) TO $(POSTGRES_BILLING_USER);
              GRANT ALL PRIVILEGES ON SCHEMA billing TO $(POSTGRES_BILLING_USER);
              GRANT ALL ON ALL TABLES IN SCHEMA billing TO $(POSTGRES_BILLING_USER);
              GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA billing TO $(POSTGRES_BILLING_USER);

              GRANT CONNECT ON DATABASE $(POSTGRES_DB) TO $(POSTGRES_NOTIFY_USER);
              GRANT ALL PRIVILEGES ON SCHEMA notify TO $(POSTGRES_NOTIFY_USER);
              GRANT ALL ON ALL TABLES IN SCHEMA notify TO $(POSTGRES_NOTIFY_USER);
              GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA notify TO $(POSTGRES_NOTIFY_USER);

              GRANT CONNECT ON DATABASE $(POSTGRES_DB) TO $(POSTGRES_ORDER_USER);
              GRANT ALL PRIVILEGES ON SCHEMA orders TO $(POSTGRES_ORDER_USER);
              GRANT ALL ON ALL TABLES IN SCHEMA orders TO $(POSTGRES_ORDER_USER);
              GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA orders TO $(POSTGRES_ORDER_USER);

              GRANT CONNECT ON DATABASE $(POSTGRES_DB) TO $(POSTGRES_PROFILE_USER);
              GRANT ALL PRIVILEGES ON SCHEMA profile TO $(POSTGRES_PROFILE_USER);
              GRANT ALL ON ALL TABLES IN SCHEMA profile TO $(POSTGRES_PROFILE_USER);
              GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA profile TO $(POSTGRES_PROFILE_USER);

              GRANT CONNECT ON DATABASE $(POSTGRES_DB) TO $(POSTGRES_STORE_USER);
              GRANT ALL PRIVILEGES ON SCHEMA store TO $(POSTGRES_STORE_USER);
              GRANT ALL ON ALL TABLES IN SCHEMA store TO $(POSTGRES_STORE_USER);
              GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA store TO $(POSTGRES_STORE_USER);

              GRANT CONNECT ON DATABASE $(POSTGRES_DB) TO $(POSTGRES_DELIVERY_USER);
              GRANT ALL PRIVILEGES ON SCHEMA delivery TO $(POSTGRES_DELIVERY_USER);
              GRANT ALL ON ALL TABLES IN SCHEMA delivery TO $(POSTGRES_DELIVERY_USER);
              GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA delivery TO $(POSTGRES_DELIVERY_USER);

            EOF

  backoffLimit: 0
